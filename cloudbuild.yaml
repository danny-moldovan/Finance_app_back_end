steps:
  # Install dependencies
  - name: python
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]

 # Access the Gemini API KEY secret and make it available for tests
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Access the secret and store it in a temporary file
        gcloud secrets versions access latest --secret=GEMINI_API_KEY > /workspace/api_key.txt
        # Set environment variables for the next step
        echo "export GEMINI_API_KEY=$$(cat /workspace/api_key.txt)" > /workspace/env_vars.sh
        cat /workspace/env_vars.sh

# Run unit tests
  - name: 'python'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/env_vars.sh
        python -m pytest tests/unit -v -s

 # Run integration tests
 # - name: 'python'
 #   entrypoint: 'bash'
 #   args:
 #     - '-c'
 #     - |
 #       source /workspace/env_vars.sh
 #       python -m pytest tests/integration/test_app_integration.py -v -s

  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest', '.']

  # Run evaluation of the currently deployed code on the test set
  #- name: "gcr.io/cloud-builders/curl"
  #  entrypoint: "sh"
  #  args:
  #    - "-c"
  #    - |
  #      curl -m 3600 -s -X POST https://finance-app-back-end-911835065349.us-central1.run.app/generate_batch_summary \
  #        -H "Content-Type: application/json" \
  #        -d '{"input_filename": "test_cases.txt", "n_rows": None, "in_parallel": true, "output_filename": "test_cases_processed_current"}' > /workspace/evaluation_response_new.txt
  #      
  #      cat /workspace/evaluation_response_current.txt

  #      # Check if the response contains a final message with status code 200
  #      if ! jq -e 'select(.message_type == "final" and .message.status_code == 200)' /workspace/evaluation_response_current.txt > /dev/null; then
  #          echo "Error: The batch summary generation failed!"
  #          exit 1
  #      fi

  #      echo "The batch summary was generated successfully!"

  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push',  'us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest']

  # Deploy to Cloud Run
  - name: google/cloud-sdk
    args: ['gcloud', 'run', 'deploy', 'finance-app-back-end', 
           '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest', 
           '--region', 'us-central1', '--platform', 'managed', 
           '--allow-unauthenticated',
           '--set-secrets=GEMINI_API_KEY=GEMINI_API_KEY:latest',
           '--cpu', '2',
           '--memory', '8000Mi',
           '--timeout', '3600'           
           ]

  # Run evaluation of the currently deployed code on the test set
  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo 'Running evaluation of the currently deployed code...'

        apt update && apt install -y jq
        
        curl -m 3600 -s -X POST https://finance-app-back-end-911835065349.us-central1.run.app/generate_batch_summary \
          -H "Content-Type: application/json" \
          -d '{"input_filename": "test_cases.txt", "n_rows": None, "in_parallel": true, "output_filename": "test_cases_processed_new"}' > /workspace/evaluation_response_new.txt
        
        cat /workspace/evaluation_response_new.txt

        # Check if the response contains a final message with status code 200
        if ! jq -e 'select(.message_type == "final" and .message.status_code == 200)' /workspace/evaluation_response_new.txt > /dev/null; then
            echo "Error: The batch summary generation failed!"
            exit 1
        fi

        echo "The batch summary was generated successfully!"

  #Compare the two evaluation files
  - name: python
    entrypoint: python
    args: [evaluation.py] 



# Save test logs to Google Cloud Storage
#artifacts:
#  objects:
#    location: gs://${_BUCKET_NAME}/
#    paths:
#      - ${SHORT_SHA}_test_log.xml

# Store images in Google Artifact Registry 
#images:
#  - us-central1-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/app:${SHORT_SHA}

# Options
options:
  logging: CLOUD_LOGGING_ONLY
timeout: 3600s