steps:
  # Install dependencies
  #- name: python
  #  entrypoint: pip
  #  args: ["install", "-r", "requirements.txt", "--user"]

  # Run unit tests
  #- name: python
  #  entrypoint: python
  #  args: ["-m", "pytest", "--junitxml=${SHORT_SHA}_test_log.xml"] 

  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest', '.']

  # Run evaluation of the currently deployed code on the test set
  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo 'Running evaluation of the currently deployed code...'

        apt update && apt install -y jq
        
        curl -s -X POST https://finance-app-back-end-911835065349.us-central1.run.app/generate_batch_summary \
          -H "Content-Type: application/json" \
          -d '{"input_filename": "test_cases.txt", "output_filename": "test_cases_processed_current"}' | jq -r '.' > /workspace/evaluation_response_current.json

        cat /workspace/evaluation_response_current.json

        if [ "$(jq -r '.message' /workspace/evaluation_response_current.json)" != "Request was successful!" ]; then
          echo "Error: The batch summary generation failed!"
          exit 1
        fi

        echo "The batch summary was generated successfully!"

    #args:
    #  - "-X"
    #  - "POST"
    #  - "https://finance-app-back-end-911835065349.us-central1.run.app/generate_batch_summary"
    #  - "-H"
    #  - "Content-Type: application/json"
    #  - "-d"
    #  - '{"input_filename": "test_cases.txt", "output_filename": "test_cases_processed_current.txt"}'

  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push',  'us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest']

  # Deploy to Cloud Run
  - name: google/cloud-sdk
    args: ['gcloud', 'run', 'deploy', 'finance-app-back-end', 
           '--image=us-central1-docker.pkg.dev/${PROJECT_ID}/finance-app-back-end/app:latest', 
           '--region', 'us-central1', '--platform', 'managed', 
           '--allow-unauthenticated',
           '--set-secrets=GEMINI_API_KEY=GEMINI_API_KEY:latest',
           '--memory', '1300Mi']

  # Run evaluation of the currently deployed code on the test set
  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        echo 'Running evaluation of the currently deployed code...'

        apt update && apt install -y jq
        
        curl -s -X POST https://finance-app-back-end-911835065349.us-central1.run.app/generate_batch_summary \
          -H "Content-Type: application/json" \
          -d '{"input_filename": "test_cases.txt", "output_filename": "test_cases_processed_new"}' | jq -r '.' > /workspace/evaluation_response_new.json

        cat /workspace/evaluation_response_new.json

        if [ "$(jq -r '.message' /workspace/evaluation_response_new.json)" != "Request was successful!" ]; then
          echo "Error: The batch summary generation failed!"
          exit 1
        fi

        echo "The batch summary was generated successfully!"

  #Compare the two evaluation files
  - name: python
    entrypoint: python
    args: [evaluation.py] 



# Save test logs to Google Cloud Storage
#artifacts:
#  objects:
#    location: gs://${_BUCKET_NAME}/
#    paths:
#      - ${SHORT_SHA}_test_log.xml

# Store images in Google Artifact Registry 
#images:
#  - us-central1-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/app:${SHORT_SHA}

# Options
options:
  logging: CLOUD_LOGGING_ONLY
timeout: 3600s